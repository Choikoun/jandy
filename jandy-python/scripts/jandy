#!/usr/bin/python
import json
import os
import subprocess
import urllib2
import shutil

import requests
import yaml

travis = os.getenv('TRAVIS')
ci = os.getenv('CI')

if travis == 'true' and ci == 'true':
    URL = "http://jandy.io"
elif os.getenv('DEV') == 'true':
    URL = "http://dev.jandy.io"
else:
    URL = "http://localhost:3000"
JAVA_PROFILER_URL = URL + "/jandy-java-profiler.jar"
PYTHON_PROFILER_URL = URL + "/jandy-python-profiler.zip"

ownerName, repoName = os.getenv('TRAVIS_REPO_SLUG').split('/')
branchName = os.getenv('TRAVIS_BRANCH')
buildId = os.getenv('TRAVIS_BUILD_ID')
buildNum = os.getenv('TRAVIS_BUILD_NUMBER')

def wget(url, filename):
    if travis == 'true' and os.path.exists(filename):
        return


def wget(url, filename):
    with open(filename, 'wb') as dest:
        response = urllib2.urlopen(url)
        dest.write(response.read())
        response.close()


def do_profile(language, id, argv):
    wget(JAVA_PROFILER_URL, 'jandy-java-profiler.jar')
    if language == 'java':
        wget(JAVA_PROFILER_URL, 'jandy-java-profiler.jar')
        args = argv[0:]
        args.insert(1, '-javaagent:jandy-java-profiler.jar')
        subprocess.call(args)
        shutil.move('java-profiler-result.jandy', id + '.jandy'),

    if language == 'python':
        args = argv[0:]
        args.insert(1, '-m')
        args.insert(2, 'jandy')
        subprocess.call(args)
        shutil.move('python-profiler-result.jandy', id + '.jandy'),


if __name__ == '__main__':
    with open('.jandy.yml', 'rb') as conf:
        yml = yaml.load(conf)
        params = {
            'ownerName': ownerName,
            'repoName': repoName,
            'branchName': branchName,
            'buildId': buildId,
            'buildNum': buildNum,
            'language': yml['language'].lower()
        }

        files = []
        try:
            for sample in yml['samples']:
                sampleId = sample['id']
                argv = sample['script'].split()
                do_profile(yml['language'].lower(), sampleId, argv)

                files.append(('samples', open(sampleId+'.jandy')))

            r = requests.post(URL + "/rest/travis", data=params, files=files)
            if r.status_code != 200:
                c = json.loads(r.content, encoding=r.encoding)
                raise RuntimeError(c[u'message'])
        finally:
            for tuple in files:
                tuple[1].close()
